# main.py

import discord
from discord.ext import commands, tasks
from datetime import datetime
import asyncio
import logging

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ API Key ‡πÅ‡∏•‡∏∞ Token
import config
# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
import stock_data_api
import news_storage

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Privileged Intents
intents.presences = True # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Privileged Intents

bot = commands.Bot(command_prefix='!', intents=intents)

# ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏ô‡πÉ‡∏à
# key: channel_id, value: set of symbols (‡πÉ‡∏ä‡πâ set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡∏ã‡πâ‡∏≥)
tracked_stocks = {}

@bot.event
async def on_ready():
    logging.info(f'{bot.user} ‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Discord ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!')
    await news_storage.init_db() # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
    logging.info("Database initialized.")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£
    check_stock_prices_task.start()
    check_news_task.start()
    clean_old_news_task.start() # ‡πÄ‡∏£‡∏¥‡πà‡∏° task ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
@bot.command(name='track')
async def track_stock(ctx, symbol: str):
    symbol = symbol.upper()
    if ctx.channel.id not in tracked_stocks:
        tracked_stocks[ctx.channel.id] = set()

    if symbol in tracked_stocks[ctx.channel.id]:
        await ctx.send(f"‡∏´‡∏∏‡πâ‡∏ô **{symbol}** ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
    else:
        tracked_stocks[ctx.channel.id].add(symbol)
        await ctx.send(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πâ‡∏ô **{symbol}** ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
        logging.info(f"Tracking {symbol} in channel {ctx.channel.id}")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πâ‡∏ô
@bot.command(name='untrack')
async def untrack_stock(ctx, symbol: str):
    symbol = symbol.upper()
    if ctx.channel.id in tracked_stocks and symbol in tracked_stocks[ctx.channel.id]:
        tracked_stocks[ctx.channel.id].remove(symbol)
        await ctx.send(f"‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πâ‡∏ô **{symbol}** ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")
        logging.info(f"Untracked {symbol} in channel {ctx.channel.id}")
        if not tracked_stocks[ctx.channel.id]: # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö entry ‡∏Ç‡∏≠‡∏á channel ‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏¥‡πâ‡∏á
            del tracked_stocks[ctx.channel.id]
    else:
        await ctx.send(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏∏‡πâ‡∏ô **{symbol}** ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
@bot.command(name='liststocks')
async def list_stocks(ctx):
    if ctx.channel.id in tracked_stocks and tracked_stocks[ctx.channel.id]:
        stocks = ", ".join(sorted(list(tracked_stocks[ctx.channel.id])))
        await ctx.send(f"‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ: **{stocks}**")
    else:
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏£‡∏∞‡∏ß‡∏±‡∏á Rate Limit)
@bot.command(name='quote')
async def get_instant_quote(ctx, symbol: str):
    symbol = symbol.upper()
    
    await ctx.send(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô **{symbol}**...")
    quote_data = stock_data_api.get_stock_data(symbol) 

    if quote_data:
        price = quote_data['current_price']
        change = quote_data['change']
        percent_change = quote_data['percent_change']
        emoji = "‚¨ÜÔ∏è" if change > 0 else "‚¨áÔ∏è" if change < 0 else "‚ÜîÔ∏è"
        
        message = (
            f"üìä **{quote_data['symbol']}** (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î): "
            f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **${price:.2f}** "
            f"{emoji} ({change:+.2f}, {percent_change:+.2f}%)"
        )
        await ctx.send(message)
    else:
        await ctx.send(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô **{symbol}** ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Rate Limit ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)")


# Task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô (Finnhub ‡∏°‡∏µ Rate Limit ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quote API)
@tasks.loop(minutes=5) # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
async def check_stock_prices_task():
    logging.info(f"Checking stock prices at {datetime.now()}")
    symbols_to_check = set()
    for channel_symbols in tracked_stocks.values():
        symbols_to_check.update(channel_symbols)

    if not symbols_to_check:
        logging.info("No stocks to track for price updates.")
        return

    for symbol in symbols_to_check:
        quote_data = stock_data_api.get_stock_data(symbol)
        if quote_data:
            price = quote_data['current_price']
            change = quote_data['change']
            percent_change = quote_data['percent_change']
            emoji = "‚¨ÜÔ∏è" if change > 0 else "‚¨áÔ∏è" if change < 0 else "‚ÜîÔ∏è"
            
            message = (
                f"üìä **{quote_data['symbol']}** "
                f"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **${price:.2f}** "
                f"{emoji} ({change:+.2f}, {percent_change:+.2f}%)"
            )
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
            for channel_id, symbols_in_channel in tracked_stocks.items():
                if symbol in symbols_in_channel:
                    channel = bot.get_channel(channel_id)
                    if channel:
                        try:
                            await channel.send(message)
                            logging.info(f"Sent price update for {symbol} to channel {channel_id}")
                        except discord.Forbidden:
                            logging.warning(f"Bot doesn't have permission to send messages in channel {channel_id}")
        else:
            logging.warning(f"Could not retrieve price data for {symbol}.")
        
        # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏ô Rate Limit (Finnhub Quote API ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏à‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
        await asyncio.sleep(1) # ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô 1 ‡∏ï‡∏±‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ 10 ‡∏ï‡∏±‡∏ß ‡∏à‡∏∞‡πÉ‡∏ä‡πâ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)


# Task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ (Finnhub News API ‡∏°‡∏µ Rate Limit ‡πÅ‡∏¢‡∏Å)
@tasks.loop(minutes=30) # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
async def check_news_task():
    logging.info(f"Checking news at {datetime.now()}")
    symbols_to_check = set()
    for channel_symbols in tracked_stocks.values():
        symbols_to_check.update(channel_symbols)

    if not symbols_to_check:
        logging.info("No stocks to track for news updates.")
        return

    for symbol in symbols_to_check:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£ (‡∏î‡∏∂‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 1-2 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏°‡∏≤)
        news_articles = stock_data_api.get_company_news(symbol, days_ago=2) 
        
        if news_articles:
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á
            for article in news_articles:
                # Finnhub news ID ‡πÄ‡∏õ‡πá‡∏ô 'id' field
                news_id = str(article['id']) # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô DB
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                is_sent_to_any_channel = False
                for channel_id, symbols_in_channel in tracked_stocks.items():
                    if symbol in symbols_in_channel:
                        if await news_storage.is_news_sent(news_id, channel_id):
                            is_sent_to_any_channel = True
                            break
                
                if not is_sent_to_any_channel:
                    # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏°‡∏≤
                    news_message = (
                        f"üì∞ **Latest News for {symbol}**\n"
                        f"> **{article['headline']}**\n"
                        f"> Summary: {article['summary'] if article['summary'] else 'No summary available.'}\n"
                        f"> Source: {article['source']}\n"
                        f"> Read more: <{article['url']}>"
                    )
                    
                    # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
                    for channel_id, symbols_in_channel in tracked_stocks.items():
                        if symbol in symbols_in_channel:
                            channel = bot.get_channel(channel_id)
                            if channel:
                                try:
                                    await channel.send(news_message)
                                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ
                                    await news_storage.add_sent_news(news_id, symbol, channel_id)
                                    logging.info(f"Sent news (ID: {news_id}) for {symbol} to channel {channel_id}")
                                except discord.Forbidden:
                                    logging.warning(f"Bot doesn't have permission to send messages in channel {channel_id}")
                else:
                    logging.info(f"News (ID: {news_id}) for {symbol} already sent to a tracking channel.")
        else:
            logging.info(f"No new news found for {symbol}.")
        
        # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ç‡πà‡∏≤‡∏ß (Finnhub News API limit: 30 calls/minute)
        await asyncio.sleep(2) # ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô 1 ‡∏ï‡∏±‡∏ß (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ 10 ‡∏ï‡∏±‡∏ß ‡∏à‡∏∞‡πÉ‡∏ä‡πâ 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

# Task ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÄ‡∏Å‡πà‡∏≤‡πÜ
@tasks.loop(hours=24) # ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
async def clean_old_news_task():
    logging.info("Starting clean_old_news_task...")
    await news_storage.clean_old_news(days_to_keep=7) # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏ß‡πâ 7 ‡∏ß‡∏±‡∏ô
    logging.info("Finished clean_old_news_task.")


# ‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
if not config.DISCORD_BOT_TOKEN or config.DISCORD_BOT_TOKEN == "YOUR_DISCORD_BOT_TOKEN":
    logging.error("Error: DISCORD_BOT_TOKEN not set in config.py.")
    logging.error("Please set your Discord bot token in config.py.")
else:
    bot.run(config.DISCORD_BOT_TOKEN)